{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useEagerConnect = void 0;\n\nconst core_1 = require(\"@web3-react/core\");\n\nconst react_1 = require(\"react\");\n\nconst util_1 = require(\"./util\");\n\nconst useEagerConnect = chainIds => {\n  const ref = react_1.useRef(false);\n  const {\n    activate,\n    active\n  } = core_1.useWeb3React();\n  const [tried, setTried] = react_1.useState(false);\n  const connector = util_1.getInjectedConnector(chainIds);\n  react_1.useEffect(() => {\n    connector.isAuthorized().then(isAuthorized => {\n      if (isAuthorized && ref.current) {\n        activate(connector, undefined, true).catch(() => {\n          if (ref.current) {\n            setTried(true);\n          }\n        });\n      } else {\n        if (ref.current) {\n          setTried(true);\n        }\n      }\n    });\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  react_1.useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n  react_1.useEffect(() => {\n    ref.current = true;\n    return () => {\n      ref.current = false;\n    };\n  }, []);\n  return tried;\n};\n\nexports.useEagerConnect = useEagerConnect;","map":{"version":3,"sources":["/Volumes/Work/projects/rome/web3-example/ui-common/dist/web3/useEagerConnect.js"],"names":["Object","defineProperty","exports","value","useEagerConnect","core_1","require","react_1","util_1","chainIds","ref","useRef","activate","active","useWeb3React","tried","setTried","useState","connector","getInjectedConnector","useEffect","isAuthorized","then","current","undefined","catch"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMF,eAAe,GAAIK,QAAD,IAAc;AAClC,QAAMC,GAAG,GAAGH,OAAO,CAACI,MAAR,CAAe,KAAf,CAAZ;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAuBR,MAAM,CAACS,YAAP,EAA7B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,OAAO,CAACU,QAAR,CAAiB,KAAjB,CAA1B;AACA,QAAMC,SAAS,GAAGV,MAAM,CAACW,oBAAP,CAA4BV,QAA5B,CAAlB;AACAF,EAAAA,OAAO,CAACa,SAAR,CAAkB,MAAM;AACpBF,IAAAA,SAAS,CAACG,YAAV,GAAyBC,IAAzB,CAA+BD,YAAD,IAAkB;AAC5C,UAAIA,YAAY,IAAIX,GAAG,CAACa,OAAxB,EAAiC;AAC7BX,QAAAA,QAAQ,CAACM,SAAD,EAAYM,SAAZ,EAAuB,IAAvB,CAAR,CAAqCC,KAArC,CAA2C,MAAM;AAC7C,cAAIf,GAAG,CAACa,OAAR,EAAiB;AACbP,YAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,SAJD;AAKH,OAND,MAOK;AACD,YAAIN,GAAG,CAACa,OAAR,EAAiB;AACbP,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ;AACJ,KAbD;AAcH,GAfD,EAeG,CAACJ,QAAD,CAfH,EALkC,CAoBlB;AAChB;;AACAL,EAAAA,OAAO,CAACa,SAAR,CAAkB,MAAM;AACpB,QAAI,CAACL,KAAD,IAAUF,MAAd,EAAsB;AAClBG,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,GAJD,EAIG,CAACD,KAAD,EAAQF,MAAR,CAJH;AAKAN,EAAAA,OAAO,CAACa,SAAR,CAAkB,MAAM;AACpBV,IAAAA,GAAG,CAACa,OAAJ,GAAc,IAAd;AACA,WAAO,MAAM;AACTb,MAAAA,GAAG,CAACa,OAAJ,GAAc,KAAd;AACH,KAFD;AAGH,GALD,EAKG,EALH;AAMA,SAAOR,KAAP;AACH,CAlCD;;AAmCAb,OAAO,CAACE,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useEagerConnect = void 0;\nconst core_1 = require(\"@web3-react/core\");\nconst react_1 = require(\"react\");\nconst util_1 = require(\"./util\");\nconst useEagerConnect = (chainIds) => {\n    const ref = react_1.useRef(false);\n    const { activate, active } = core_1.useWeb3React();\n    const [tried, setTried] = react_1.useState(false);\n    const connector = util_1.getInjectedConnector(chainIds);\n    react_1.useEffect(() => {\n        connector.isAuthorized().then((isAuthorized) => {\n            if (isAuthorized && ref.current) {\n                activate(connector, undefined, true).catch(() => {\n                    if (ref.current) {\n                        setTried(true);\n                    }\n                });\n            }\n            else {\n                if (ref.current) {\n                    setTried(true);\n                }\n            }\n        });\n    }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    react_1.useEffect(() => {\n        if (!tried && active) {\n            setTried(true);\n        }\n    }, [tried, active]);\n    react_1.useEffect(() => {\n        ref.current = true;\n        return () => {\n            ref.current = false;\n        };\n    }, []);\n    return tried;\n};\nexports.useEagerConnect = useEagerConnect;\n"]},"metadata":{},"sourceType":"script"}