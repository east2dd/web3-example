{"ast":null,"code":"import { useWeb3React } from '@web3-react/core';\nimport { useEffect } from 'react';\nimport { getInjectedConnector } from './util';\nexport const useEthereumInactiveListener = (chainIds, suppress = false) => {\n  const {\n    active,\n    error,\n    activate\n  } = useWeb3React();\n  const connector = getInjectedConnector(chainIds);\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = chainId => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId);\n        activate(connector);\n      };\n\n      const handleAccountsChanged = accounts => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n\n        if (accounts.length > 0) {\n          activate(connector);\n        }\n      };\n\n      const handleNetworkChanged = networkId => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId);\n        activate(connector);\n      };\n\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      ethereum.on('networkChanged', handleNetworkChanged);\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n          ethereum.removeListener('networkChanged', handleNetworkChanged);\n        }\n      };\n    }\n  }, [active, error, suppress, activate, connector]);\n};","map":{"version":3,"sources":["/Volumes/Work/projects/rome/web3-example/ui-common/dist/web3/useEthereumInactiveListener.js"],"names":["useWeb3React","useEffect","getInjectedConnector","useEthereumInactiveListener","chainIds","suppress","active","error","activate","connector","ethereum","window","on","handleChainChanged","chainId","console","log","handleAccountsChanged","accounts","length","handleNetworkChanged","networkId","removeListener"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,oBAAT,QAAqC,QAArC;AACA,OAAO,MAAMC,2BAA2B,GAAG,CAACC,QAAD,EAAWC,QAAQ,GAAG,KAAtB,KAAgC;AACvE,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAA8BR,YAAY,EAAhD;AACA,QAAMS,SAAS,GAAGP,oBAAoB,CAACE,QAAD,CAAtC;AACAH,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAAES,MAAAA;AAAF,QAAeC,MAArB;;AACA,QAAID,QAAQ,IAAIA,QAAQ,CAACE,EAArB,IAA2B,CAACN,MAA5B,IAAsC,CAACC,KAAvC,IAAgD,CAACF,QAArD,EAA+D;AAC3D,YAAMQ,kBAAkB,GAAIC,OAAD,IAAa;AACpCC,QAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DF,OAA1D;AACAN,QAAAA,QAAQ,CAACC,SAAD,CAAR;AACH,OAHD;;AAIA,YAAMQ,qBAAqB,GAAIC,QAAD,IAAc;AACxCH,QAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ,EAA6DE,QAA7D;;AACA,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACrBX,UAAAA,QAAQ,CAACC,SAAD,CAAR;AACH;AACJ,OALD;;AAMA,YAAMW,oBAAoB,GAAIC,SAAD,IAAe;AACxCN,QAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ,EAA4DK,SAA5D;AACAb,QAAAA,QAAQ,CAACC,SAAD,CAAR;AACH,OAHD;;AAIAC,MAAAA,QAAQ,CAACE,EAAT,CAAY,cAAZ,EAA4BC,kBAA5B;AACAH,MAAAA,QAAQ,CAACE,EAAT,CAAY,iBAAZ,EAA+BK,qBAA/B;AACAP,MAAAA,QAAQ,CAACE,EAAT,CAAY,gBAAZ,EAA8BQ,oBAA9B;AACA,aAAO,MAAM;AACT,YAAIV,QAAQ,CAACY,cAAb,EAA6B;AACzBZ,UAAAA,QAAQ,CAACY,cAAT,CAAwB,cAAxB,EAAwCT,kBAAxC;AACAH,UAAAA,QAAQ,CAACY,cAAT,CAAwB,iBAAxB,EAA2CL,qBAA3C;AACAP,UAAAA,QAAQ,CAACY,cAAT,CAAwB,gBAAxB,EAA0CF,oBAA1C;AACH;AACJ,OAND;AAOH;AACJ,GA5BQ,EA4BN,CAACd,MAAD,EAASC,KAAT,EAAgBF,QAAhB,EAA0BG,QAA1B,EAAoCC,SAApC,CA5BM,CAAT;AA6BH,CAhCM","sourcesContent":["import { useWeb3React } from '@web3-react/core';\nimport { useEffect } from 'react';\nimport { getInjectedConnector } from './util';\nexport const useEthereumInactiveListener = (chainIds, suppress = false) => {\n    const { active, error, activate } = useWeb3React();\n    const connector = getInjectedConnector(chainIds);\n    useEffect(() => {\n        const { ethereum } = window;\n        if (ethereum && ethereum.on && !active && !error && !suppress) {\n            const handleChainChanged = (chainId) => {\n                console.log(\"Handling 'chainChanged' event with payload\", chainId);\n                activate(connector);\n            };\n            const handleAccountsChanged = (accounts) => {\n                console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n                if (accounts.length > 0) {\n                    activate(connector);\n                }\n            };\n            const handleNetworkChanged = (networkId) => {\n                console.log(\"Handling 'networkChanged' event with payload\", networkId);\n                activate(connector);\n            };\n            ethereum.on('chainChanged', handleChainChanged);\n            ethereum.on('accountsChanged', handleAccountsChanged);\n            ethereum.on('networkChanged', handleNetworkChanged);\n            return () => {\n                if (ethereum.removeListener) {\n                    ethereum.removeListener('chainChanged', handleChainChanged);\n                    ethereum.removeListener('accountsChanged', handleAccountsChanged);\n                    ethereum.removeListener('networkChanged', handleNetworkChanged);\n                }\n            };\n        }\n    }, [active, error, suppress, activate, connector]);\n};\n"]},"metadata":{},"sourceType":"module"}