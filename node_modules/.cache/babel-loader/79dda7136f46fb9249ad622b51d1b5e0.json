{"ast":null,"code":"import { useWeb3React } from '@web3-react/core';\nimport { useEffect, useRef, useState } from 'react';\nimport { getInjectedConnector } from './util';\nexport const useEagerConnect = chainIds => {\n  const ref = useRef(false);\n  const {\n    activate,\n    active\n  } = useWeb3React();\n  const [tried, setTried] = useState(false);\n  const connector = getInjectedConnector(chainIds);\n  useEffect(() => {\n    connector.isAuthorized().then(isAuthorized => {\n      if (isAuthorized && ref.current) {\n        activate(connector, undefined, true).catch(() => {\n          if (ref.current) {\n            setTried(true);\n          }\n        });\n      } else {\n        if (ref.current) {\n          setTried(true);\n        }\n      }\n    });\n  }, [activate, connector]); // intentionally only running on mount (make sure it's only mounted once :))\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n  useEffect(() => {\n    ref.current = true;\n    return () => {\n      ref.current = false;\n    };\n  }, []);\n  return tried;\n};","map":{"version":3,"sources":["/Volumes/Work/projects/rome/web3-example/ui-common/dist/web3/useEagerConnect.js"],"names":["useWeb3React","useEffect","useRef","useState","getInjectedConnector","useEagerConnect","chainIds","ref","activate","active","tried","setTried","connector","isAuthorized","then","current","undefined","catch"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,oBAAT,QAAqC,QAArC;AACA,OAAO,MAAMC,eAAe,GAAIC,QAAD,IAAc;AACzC,QAAMC,GAAG,GAAGL,MAAM,CAAC,KAAD,CAAlB;AACA,QAAM;AAAEM,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAuBT,YAAY,EAAzC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAMS,SAAS,GAAGR,oBAAoB,CAACE,QAAD,CAAtC;AACAL,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,SAAS,CAACC,YAAV,GAAyBC,IAAzB,CAA+BD,YAAD,IAAkB;AAC5C,UAAIA,YAAY,IAAIN,GAAG,CAACQ,OAAxB,EAAiC;AAC7BP,QAAAA,QAAQ,CAACI,SAAD,EAAYI,SAAZ,EAAuB,IAAvB,CAAR,CAAqCC,KAArC,CAA2C,MAAM;AAC7C,cAAIV,GAAG,CAACQ,OAAR,EAAiB;AACbJ,YAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,SAJD;AAKH,OAND,MAOK;AACD,YAAIJ,GAAG,CAACQ,OAAR,EAAiB;AACbJ,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ;AACJ,KAbD;AAcH,GAfQ,EAeN,CAACH,QAAD,EAAWI,SAAX,CAfM,CAAT,CALyC,CAoBd;AAC3B;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACS,KAAD,IAAUD,MAAd,EAAsB;AAClBE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,GAJQ,EAIN,CAACD,KAAD,EAAQD,MAAR,CAJM,CAAT;AAKAR,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,GAAG,CAACQ,OAAJ,GAAc,IAAd;AACA,WAAO,MAAM;AACTR,MAAAA,GAAG,CAACQ,OAAJ,GAAc,KAAd;AACH,KAFD;AAGH,GALQ,EAKN,EALM,CAAT;AAMA,SAAOL,KAAP;AACH,CAlCM","sourcesContent":["import { useWeb3React } from '@web3-react/core';\nimport { useEffect, useRef, useState } from 'react';\nimport { getInjectedConnector } from './util';\nexport const useEagerConnect = (chainIds) => {\n    const ref = useRef(false);\n    const { activate, active } = useWeb3React();\n    const [tried, setTried] = useState(false);\n    const connector = getInjectedConnector(chainIds);\n    useEffect(() => {\n        connector.isAuthorized().then((isAuthorized) => {\n            if (isAuthorized && ref.current) {\n                activate(connector, undefined, true).catch(() => {\n                    if (ref.current) {\n                        setTried(true);\n                    }\n                });\n            }\n            else {\n                if (ref.current) {\n                    setTried(true);\n                }\n            }\n        });\n    }, [activate, connector]); // intentionally only running on mount (make sure it's only mounted once :))\n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n        if (!tried && active) {\n            setTried(true);\n        }\n    }, [tried, active]);\n    useEffect(() => {\n        ref.current = true;\n        return () => {\n            ref.current = false;\n        };\n    }, []);\n    return tried;\n};\n"]},"metadata":{},"sourceType":"module"}