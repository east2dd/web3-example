{"ast":null,"code":"import { useWeb3React } from '@web3-react/core';\nimport { useEffect, useRef, useState } from 'react';\nimport { getInjectedConnector } from './util';\nexport var useEagerConnect = function (chainIds) {\n  var ref = useRef(false);\n\n  var _a = useWeb3React(),\n      activate = _a.activate,\n      active = _a.active;\n\n  var _b = useState(false),\n      tried = _b[0],\n      setTried = _b[1];\n\n  var connector = getInjectedConnector(chainIds);\n  useEffect(function () {\n    connector.isAuthorized().then(function (isAuthorized) {\n      if (isAuthorized && ref.current) {\n        activate(connector, undefined, true).catch(function () {\n          if (ref.current) {\n            setTried(true);\n          }\n        });\n      } else {\n        if (ref.current) {\n          setTried(true);\n        }\n      }\n    });\n  }, [activate, connector]); // intentionally only running on mount (make sure it's only mounted once :))\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(function () {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n  useEffect(function () {\n    ref.current = true;\n    return function () {\n      ref.current = false;\n    };\n  }, []);\n  return tried;\n};","map":{"version":3,"sources":["/Volumes/Work/projects/rome/web3-example/ui-common/dist/web3/useEagerConnect.js"],"names":["useWeb3React","useEffect","useRef","useState","getInjectedConnector","useEagerConnect","chainIds","ref","_a","activate","active","_b","tried","setTried","connector","isAuthorized","then","current","undefined","catch"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,oBAAT,QAAqC,QAArC;AACA,OAAO,IAAIC,eAAe,GAAG,UAAUC,QAAV,EAAoB;AAC7C,MAAIC,GAAG,GAAGL,MAAM,CAAC,KAAD,CAAhB;;AACA,MAAIM,EAAE,GAAGR,YAAY,EAArB;AAAA,MAAyBS,QAAQ,GAAGD,EAAE,CAACC,QAAvC;AAAA,MAAiDC,MAAM,GAAGF,EAAE,CAACE,MAA7D;;AACA,MAAIC,EAAE,GAAGR,QAAQ,CAAC,KAAD,CAAjB;AAAA,MAA0BS,KAAK,GAAGD,EAAE,CAAC,CAAD,CAApC;AAAA,MAAyCE,QAAQ,GAAGF,EAAE,CAAC,CAAD,CAAtD;;AACA,MAAIG,SAAS,GAAGV,oBAAoB,CAACE,QAAD,CAApC;AACAL,EAAAA,SAAS,CAAC,YAAY;AAClBa,IAAAA,SAAS,CAACC,YAAV,GAAyBC,IAAzB,CAA8B,UAAUD,YAAV,EAAwB;AAClD,UAAIA,YAAY,IAAIR,GAAG,CAACU,OAAxB,EAAiC;AAC7BR,QAAAA,QAAQ,CAACK,SAAD,EAAYI,SAAZ,EAAuB,IAAvB,CAAR,CAAqCC,KAArC,CAA2C,YAAY;AACnD,cAAIZ,GAAG,CAACU,OAAR,EAAiB;AACbJ,YAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,SAJD;AAKH,OAND,MAOK;AACD,YAAIN,GAAG,CAACU,OAAR,EAAiB;AACbJ,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ;AACJ,KAbD;AAcH,GAfQ,EAeN,CAACJ,QAAD,EAAWK,SAAX,CAfM,CAAT,CAL6C,CAoBlB;AAC3B;;AACAb,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAI,CAACW,KAAD,IAAUF,MAAd,EAAsB;AAClBG,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,GAJQ,EAIN,CAACD,KAAD,EAAQF,MAAR,CAJM,CAAT;AAKAT,EAAAA,SAAS,CAAC,YAAY;AAClBM,IAAAA,GAAG,CAACU,OAAJ,GAAc,IAAd;AACA,WAAO,YAAY;AACfV,MAAAA,GAAG,CAACU,OAAJ,GAAc,KAAd;AACH,KAFD;AAGH,GALQ,EAKN,EALM,CAAT;AAMA,SAAOL,KAAP;AACH,CAlCM","sourcesContent":["import { useWeb3React } from '@web3-react/core';\nimport { useEffect, useRef, useState } from 'react';\nimport { getInjectedConnector } from './util';\nexport var useEagerConnect = function (chainIds) {\n    var ref = useRef(false);\n    var _a = useWeb3React(), activate = _a.activate, active = _a.active;\n    var _b = useState(false), tried = _b[0], setTried = _b[1];\n    var connector = getInjectedConnector(chainIds);\n    useEffect(function () {\n        connector.isAuthorized().then(function (isAuthorized) {\n            if (isAuthorized && ref.current) {\n                activate(connector, undefined, true).catch(function () {\n                    if (ref.current) {\n                        setTried(true);\n                    }\n                });\n            }\n            else {\n                if (ref.current) {\n                    setTried(true);\n                }\n            }\n        });\n    }, [activate, connector]); // intentionally only running on mount (make sure it's only mounted once :))\n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(function () {\n        if (!tried && active) {\n            setTried(true);\n        }\n    }, [tried, active]);\n    useEffect(function () {\n        ref.current = true;\n        return function () {\n            ref.current = false;\n        };\n    }, []);\n    return tried;\n};\n"]},"metadata":{},"sourceType":"module"}