{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useEthereumInactiveListener = void 0;\n\nconst core_1 = require(\"@web3-react/core\");\n\nconst react_1 = require(\"react\");\n\nconst util_1 = require(\"./util\");\n\nconst useEthereumInactiveListener = (chainIds, suppress = false) => {\n  const {\n    active,\n    error,\n    activate\n  } = core_1.useWeb3React();\n  const connector = util_1.getInjectedConnector(chainIds);\n  react_1.useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = chainId => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId);\n        activate(connector);\n      };\n\n      const handleAccountsChanged = accounts => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n\n        if (accounts.length > 0) {\n          activate(connector);\n        }\n      };\n\n      const handleNetworkChanged = networkId => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId);\n        activate(connector);\n      };\n\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      ethereum.on('networkChanged', handleNetworkChanged);\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n          ethereum.removeListener('networkChanged', handleNetworkChanged);\n        }\n      };\n    }\n  }, [active, error, suppress, activate]);\n};\n\nexports.useEthereumInactiveListener = useEthereumInactiveListener;","map":{"version":3,"sources":["/Volumes/Work/projects/rome/web3-example/ui-common/dist/web3/useEthereumInactiveListener.js"],"names":["Object","defineProperty","exports","value","useEthereumInactiveListener","core_1","require","react_1","util_1","chainIds","suppress","active","error","activate","useWeb3React","connector","getInjectedConnector","useEffect","ethereum","window","on","handleChainChanged","chainId","console","log","handleAccountsChanged","accounts","length","handleNetworkChanged","networkId","removeListener"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,2BAAR,GAAsC,KAAK,CAA3C;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMF,2BAA2B,GAAG,CAACK,QAAD,EAAWC,QAAQ,GAAG,KAAtB,KAAgC;AAChE,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAA8BR,MAAM,CAACS,YAAP,EAApC;AACA,QAAMC,SAAS,GAAGP,MAAM,CAACQ,oBAAP,CAA4BP,QAA5B,CAAlB;AACAF,EAAAA,OAAO,CAACU,SAAR,CAAkB,MAAM;AACpB,UAAM;AAAEC,MAAAA;AAAF,QAAeC,MAArB;;AACA,QAAID,QAAQ,IAAIA,QAAQ,CAACE,EAArB,IAA2B,CAACT,MAA5B,IAAsC,CAACC,KAAvC,IAAgD,CAACF,QAArD,EAA+D;AAC3D,YAAMW,kBAAkB,GAAIC,OAAD,IAAa;AACpCC,QAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DF,OAA1D;AACAT,QAAAA,QAAQ,CAACE,SAAD,CAAR;AACH,OAHD;;AAIA,YAAMU,qBAAqB,GAAIC,QAAD,IAAc;AACxCH,QAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ,EAA6DE,QAA7D;;AACA,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACrBd,UAAAA,QAAQ,CAACE,SAAD,CAAR;AACH;AACJ,OALD;;AAMA,YAAMa,oBAAoB,GAAIC,SAAD,IAAe;AACxCN,QAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ,EAA4DK,SAA5D;AACAhB,QAAAA,QAAQ,CAACE,SAAD,CAAR;AACH,OAHD;;AAIAG,MAAAA,QAAQ,CAACE,EAAT,CAAY,cAAZ,EAA4BC,kBAA5B;AACAH,MAAAA,QAAQ,CAACE,EAAT,CAAY,iBAAZ,EAA+BK,qBAA/B;AACAP,MAAAA,QAAQ,CAACE,EAAT,CAAY,gBAAZ,EAA8BQ,oBAA9B;AACA,aAAO,MAAM;AACT,YAAIV,QAAQ,CAACY,cAAb,EAA6B;AACzBZ,UAAAA,QAAQ,CAACY,cAAT,CAAwB,cAAxB,EAAwCT,kBAAxC;AACAH,UAAAA,QAAQ,CAACY,cAAT,CAAwB,iBAAxB,EAA2CL,qBAA3C;AACAP,UAAAA,QAAQ,CAACY,cAAT,CAAwB,gBAAxB,EAA0CF,oBAA1C;AACH;AACJ,OAND;AAOH;AACJ,GA5BD,EA4BG,CAACjB,MAAD,EAASC,KAAT,EAAgBF,QAAhB,EAA0BG,QAA1B,CA5BH;AA6BH,CAhCD;;AAiCAX,OAAO,CAACE,2BAAR,GAAsCA,2BAAtC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useEthereumInactiveListener = void 0;\nconst core_1 = require(\"@web3-react/core\");\nconst react_1 = require(\"react\");\nconst util_1 = require(\"./util\");\nconst useEthereumInactiveListener = (chainIds, suppress = false) => {\n    const { active, error, activate } = core_1.useWeb3React();\n    const connector = util_1.getInjectedConnector(chainIds);\n    react_1.useEffect(() => {\n        const { ethereum } = window;\n        if (ethereum && ethereum.on && !active && !error && !suppress) {\n            const handleChainChanged = (chainId) => {\n                console.log(\"Handling 'chainChanged' event with payload\", chainId);\n                activate(connector);\n            };\n            const handleAccountsChanged = (accounts) => {\n                console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n                if (accounts.length > 0) {\n                    activate(connector);\n                }\n            };\n            const handleNetworkChanged = (networkId) => {\n                console.log(\"Handling 'networkChanged' event with payload\", networkId);\n                activate(connector);\n            };\n            ethereum.on('chainChanged', handleChainChanged);\n            ethereum.on('accountsChanged', handleAccountsChanged);\n            ethereum.on('networkChanged', handleNetworkChanged);\n            return () => {\n                if (ethereum.removeListener) {\n                    ethereum.removeListener('chainChanged', handleChainChanged);\n                    ethereum.removeListener('accountsChanged', handleAccountsChanged);\n                    ethereum.removeListener('networkChanged', handleNetworkChanged);\n                }\n            };\n        }\n    }, [active, error, suppress, activate]);\n};\nexports.useEthereumInactiveListener = useEthereumInactiveListener;\n"]},"metadata":{},"sourceType":"script"}