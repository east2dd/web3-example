{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { getInjectedConnector } from \"./util\";\nexport var useSwitchNetwork = function () {\n  var ref = useRef(false);\n\n  var _a = useState(false),\n      loading = _a[0],\n      setLoading = _a[1];\n\n  var _b = useState(),\n      error = _b[0],\n      setError = _b[1];\n\n  var switchNetwork = useCallback(function (_a) {\n    var chainId = _a.chainId,\n        chainName = _a.chainName,\n        nativeCurrency = _a.nativeCurrency,\n        rpcUrl = _a.rpcUrl,\n        blockExplorerUrl = _a.blockExplorerUrl;\n    setLoading(true);\n    getInjectedConnector([chainId]).getProvider().then(function (provider) {\n      provider.request({\n        method: 'wallet_addEthereumChain',\n        params: [{\n          chainId: chainId,\n          chainName: chainName,\n          nativeCurrency: nativeCurrency,\n          rpcUrls: [rpcUrl],\n          blockExplorerUrls: [blockExplorerUrl]\n        }]\n      }).catch(function (err) {\n        console.log(err);\n\n        if (ref.current) {\n          setError(err);\n        }\n      }).then(function () {\n        if (ref.current) {\n          setLoading(false);\n        }\n      });\n    });\n  }, []);\n  useEffect(function () {\n    ref.current = true;\n    return function () {\n      ref.current = false;\n    };\n  }, []);\n  return {\n    loading: loading,\n    error: error,\n    switchNetwork: switchNetwork\n  };\n};","map":{"version":3,"sources":["/Volumes/Work/projects/rome/web3-example/ui-common/dist/web3/useSwitchNetwork.js"],"names":["useCallback","useEffect","useRef","useState","getInjectedConnector","useSwitchNetwork","ref","_a","loading","setLoading","_b","error","setError","switchNetwork","chainId","chainName","nativeCurrency","rpcUrl","blockExplorerUrl","getProvider","then","provider","request","method","params","rpcUrls","blockExplorerUrls","catch","err","console","log","current"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,QAAzC,QAAyD,OAAzD;AACA,SAASC,oBAAT,QAAqC,QAArC;AACA,OAAO,IAAIC,gBAAgB,GAAG,YAAY;AACtC,MAAIC,GAAG,GAAGJ,MAAM,CAAC,KAAD,CAAhB;;AACA,MAAIK,EAAE,GAAGJ,QAAQ,CAAC,KAAD,CAAjB;AAAA,MAA0BK,OAAO,GAAGD,EAAE,CAAC,CAAD,CAAtC;AAAA,MAA2CE,UAAU,GAAGF,EAAE,CAAC,CAAD,CAA1D;;AACA,MAAIG,EAAE,GAAGP,QAAQ,EAAjB;AAAA,MAAqBQ,KAAK,GAAGD,EAAE,CAAC,CAAD,CAA/B;AAAA,MAAoCE,QAAQ,GAAGF,EAAE,CAAC,CAAD,CAAjD;;AACA,MAAIG,aAAa,GAAGb,WAAW,CAAC,UAAUO,EAAV,EAAc;AAC1C,QAAIO,OAAO,GAAGP,EAAE,CAACO,OAAjB;AAAA,QAA0BC,SAAS,GAAGR,EAAE,CAACQ,SAAzC;AAAA,QAAoDC,cAAc,GAAGT,EAAE,CAACS,cAAxE;AAAA,QAAwFC,MAAM,GAAGV,EAAE,CAACU,MAApG;AAAA,QAA4GC,gBAAgB,GAAGX,EAAE,CAACW,gBAAlI;AACAT,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAL,IAAAA,oBAAoB,CAAC,CAACU,OAAD,CAAD,CAApB,CAAgCK,WAAhC,GAA8CC,IAA9C,CAAmD,UAAUC,QAAV,EAAoB;AACnEA,MAAAA,QAAQ,CACHC,OADL,CACa;AACTC,QAAAA,MAAM,EAAE,yBADC;AAETC,QAAAA,MAAM,EAAE,CACJ;AACIV,UAAAA,OAAO,EAAEA,OADb;AAEIC,UAAAA,SAAS,EAAEA,SAFf;AAGIC,UAAAA,cAAc,EAAEA,cAHpB;AAIIS,UAAAA,OAAO,EAAE,CAACR,MAAD,CAJb;AAKIS,UAAAA,iBAAiB,EAAE,CAACR,gBAAD;AALvB,SADI;AAFC,OADb,EAaKS,KAbL,CAaW,UAAUC,GAAV,EAAe;AACtBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,YAAItB,GAAG,CAACyB,OAAR,EAAiB;AACbnB,UAAAA,QAAQ,CAACgB,GAAD,CAAR;AACH;AACJ,OAlBD,EAmBKR,IAnBL,CAmBU,YAAY;AAClB,YAAId,GAAG,CAACyB,OAAR,EAAiB;AACbtB,UAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,OAvBD;AAwBH,KAzBD;AA0BH,GA7B8B,EA6B5B,EA7B4B,CAA/B;AA8BAR,EAAAA,SAAS,CAAC,YAAY;AAClBK,IAAAA,GAAG,CAACyB,OAAJ,GAAc,IAAd;AACA,WAAO,YAAY;AACfzB,MAAAA,GAAG,CAACyB,OAAJ,GAAc,KAAd;AACH,KAFD;AAGH,GALQ,EAKN,EALM,CAAT;AAMA,SAAO;AAAEvB,IAAAA,OAAO,EAAEA,OAAX;AAAoBG,IAAAA,KAAK,EAAEA,KAA3B;AAAkCE,IAAAA,aAAa,EAAEA;AAAjD,GAAP;AACH,CAzCM","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { getInjectedConnector } from \"./util\";\nexport var useSwitchNetwork = function () {\n    var ref = useRef(false);\n    var _a = useState(false), loading = _a[0], setLoading = _a[1];\n    var _b = useState(), error = _b[0], setError = _b[1];\n    var switchNetwork = useCallback(function (_a) {\n        var chainId = _a.chainId, chainName = _a.chainName, nativeCurrency = _a.nativeCurrency, rpcUrl = _a.rpcUrl, blockExplorerUrl = _a.blockExplorerUrl;\n        setLoading(true);\n        getInjectedConnector([chainId]).getProvider().then(function (provider) {\n            provider\n                .request({\n                method: 'wallet_addEthereumChain',\n                params: [\n                    {\n                        chainId: chainId,\n                        chainName: chainName,\n                        nativeCurrency: nativeCurrency,\n                        rpcUrls: [rpcUrl],\n                        blockExplorerUrls: [blockExplorerUrl],\n                    },\n                ],\n            })\n                .catch(function (err) {\n                console.log(err);\n                if (ref.current) {\n                    setError(err);\n                }\n            })\n                .then(function () {\n                if (ref.current) {\n                    setLoading(false);\n                }\n            });\n        });\n    }, []);\n    useEffect(function () {\n        ref.current = true;\n        return function () {\n            ref.current = false;\n        };\n    }, []);\n    return { loading: loading, error: error, switchNetwork: switchNetwork };\n};\n"]},"metadata":{},"sourceType":"module"}