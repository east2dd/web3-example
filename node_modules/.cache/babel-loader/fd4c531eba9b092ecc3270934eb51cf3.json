{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { getInjectedConnector } from \"./util\";\nexport const useSwitchNetwork = () => {\n  const ref = useRef(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n  const switchNetwork = useCallback(({\n    chainId,\n    chainName,\n    nativeCurrency,\n    rpcUrl,\n    blockExplorerUrl\n  }) => {\n    setLoading(true);\n    getInjectedConnector([chainId]).getProvider().then(provider => {\n      provider.request({\n        method: 'wallet_addEthereumChain',\n        params: [{\n          chainId,\n          chainName,\n          nativeCurrency,\n          rpcUrls: [rpcUrl],\n          blockExplorerUrls: [blockExplorerUrl]\n        }]\n      }).catch(err => {\n        console.log(err);\n\n        if (ref.current) {\n          setError(err);\n        }\n      }).then(() => {\n        if (ref.current) {\n          setLoading(false);\n        }\n      });\n    });\n  }, []);\n  useEffect(() => {\n    ref.current = true;\n    return () => {\n      ref.current = false;\n    };\n  }, []);\n  return {\n    loading,\n    error,\n    switchNetwork\n  };\n};","map":{"version":3,"sources":["/Volumes/Work/projects/rome/web3-example/ui-common/dist/web3/useSwitchNetwork.js"],"names":["useCallback","useEffect","useRef","useState","getInjectedConnector","useSwitchNetwork","ref","loading","setLoading","error","setError","switchNetwork","chainId","chainName","nativeCurrency","rpcUrl","blockExplorerUrl","getProvider","then","provider","request","method","params","rpcUrls","blockExplorerUrls","catch","err","console","log","current"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,QAAzC,QAAyD,OAAzD;AACA,SAASC,oBAAT,QAAqC,QAArC;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAClC,QAAMC,GAAG,GAAGJ,MAAM,CAAC,KAAD,CAAlB;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,EAAlC;AACA,QAAMQ,aAAa,GAAGX,WAAW,CAAC,CAAC;AAAEY,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA,cAAtB;AAAsCC,IAAAA,MAAtC;AAA8CC,IAAAA;AAA9C,GAAD,KAAuE;AACrGR,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAJ,IAAAA,oBAAoB,CAAC,CAACQ,OAAD,CAAD,CAApB,CAAgCK,WAAhC,GAA8CC,IAA9C,CAAoDC,QAAD,IAAc;AAC7DA,MAAAA,QAAQ,CACHC,OADL,CACa;AACTC,QAAAA,MAAM,EAAE,yBADC;AAETC,QAAAA,MAAM,EAAE,CACJ;AACIV,UAAAA,OADJ;AAEIC,UAAAA,SAFJ;AAGIC,UAAAA,cAHJ;AAIIS,UAAAA,OAAO,EAAE,CAACR,MAAD,CAJb;AAKIS,UAAAA,iBAAiB,EAAE,CAACR,gBAAD;AALvB,SADI;AAFC,OADb,EAaKS,KAbL,CAaYC,GAAD,IAAS;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,YAAIpB,GAAG,CAACuB,OAAR,EAAiB;AACbnB,UAAAA,QAAQ,CAACgB,GAAD,CAAR;AACH;AACJ,OAlBD,EAmBKR,IAnBL,CAmBU,MAAM;AACZ,YAAIZ,GAAG,CAACuB,OAAR,EAAiB;AACbrB,UAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,OAvBD;AAwBH,KAzBD;AA0BH,GA5BgC,EA4B9B,EA5B8B,CAAjC;AA6BAP,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,GAAG,CAACuB,OAAJ,GAAc,IAAd;AACA,WAAO,MAAM;AACTvB,MAAAA,GAAG,CAACuB,OAAJ,GAAc,KAAd;AACH,KAFD;AAGH,GALQ,EAKN,EALM,CAAT;AAMA,SAAO;AAAEtB,IAAAA,OAAF;AAAWE,IAAAA,KAAX;AAAkBE,IAAAA;AAAlB,GAAP;AACH,CAxCM","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { getInjectedConnector } from \"./util\";\nexport const useSwitchNetwork = () => {\n    const ref = useRef(false);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState();\n    const switchNetwork = useCallback(({ chainId, chainName, nativeCurrency, rpcUrl, blockExplorerUrl, }) => {\n        setLoading(true);\n        getInjectedConnector([chainId]).getProvider().then((provider) => {\n            provider\n                .request({\n                method: 'wallet_addEthereumChain',\n                params: [\n                    {\n                        chainId,\n                        chainName,\n                        nativeCurrency,\n                        rpcUrls: [rpcUrl],\n                        blockExplorerUrls: [blockExplorerUrl],\n                    },\n                ],\n            })\n                .catch((err) => {\n                console.log(err);\n                if (ref.current) {\n                    setError(err);\n                }\n            })\n                .then(() => {\n                if (ref.current) {\n                    setLoading(false);\n                }\n            });\n        });\n    }, []);\n    useEffect(() => {\n        ref.current = true;\n        return () => {\n            ref.current = false;\n        };\n    }, []);\n    return { loading, error, switchNetwork };\n};\n"]},"metadata":{},"sourceType":"module"}