{"ast":null,"code":"import { useWeb3React } from '@web3-react/core';\nimport { useEffect } from 'react';\nimport { getInjectedConnector } from './util';\nexport var useEthereumInactiveListener = function (chainIds, suppress) {\n  if (suppress === void 0) {\n    suppress = false;\n  }\n\n  var _a = useWeb3React(),\n      active = _a.active,\n      error = _a.error,\n      activate = _a.activate;\n\n  var connector = getInjectedConnector(chainIds);\n  useEffect(function () {\n    var ethereum = window.ethereum;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      var handleChainChanged_1 = function (chainId) {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId);\n        activate(connector);\n      };\n\n      var handleAccountsChanged_1 = function (accounts) {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n\n        if (accounts.length > 0) {\n          activate(connector);\n        }\n      };\n\n      var handleNetworkChanged_1 = function (networkId) {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId);\n        activate(connector);\n      };\n\n      ethereum.on('chainChanged', handleChainChanged_1);\n      ethereum.on('accountsChanged', handleAccountsChanged_1);\n      ethereum.on('networkChanged', handleNetworkChanged_1);\n      return function () {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged_1);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged_1);\n          ethereum.removeListener('networkChanged', handleNetworkChanged_1);\n        }\n      };\n    }\n  }, [active, error, suppress, activate, connector]);\n};","map":{"version":3,"sources":["/Volumes/Work/projects/rome/web3-example/ui-common/dist/web3/useEthereumInactiveListener.js"],"names":["useWeb3React","useEffect","getInjectedConnector","useEthereumInactiveListener","chainIds","suppress","_a","active","error","activate","connector","ethereum","window","on","handleChainChanged_1","chainId","console","log","handleAccountsChanged_1","accounts","length","handleNetworkChanged_1","networkId","removeListener"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,oBAAT,QAAqC,QAArC;AACA,OAAO,IAAIC,2BAA2B,GAAG,UAAUC,QAAV,EAAoBC,QAApB,EAA8B;AACnE,MAAIA,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAAEA,IAAAA,QAAQ,GAAG,KAAX;AAAmB;;AAC9C,MAAIC,EAAE,GAAGN,YAAY,EAArB;AAAA,MAAyBO,MAAM,GAAGD,EAAE,CAACC,MAArC;AAAA,MAA6CC,KAAK,GAAGF,EAAE,CAACE,KAAxD;AAAA,MAA+DC,QAAQ,GAAGH,EAAE,CAACG,QAA7E;;AACA,MAAIC,SAAS,GAAGR,oBAAoB,CAACE,QAAD,CAApC;AACAH,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIU,QAAQ,GAAGC,MAAM,CAACD,QAAtB;;AACA,QAAIA,QAAQ,IAAIA,QAAQ,CAACE,EAArB,IAA2B,CAACN,MAA5B,IAAsC,CAACC,KAAvC,IAAgD,CAACH,QAArD,EAA+D;AAC3D,UAAIS,oBAAoB,GAAG,UAAUC,OAAV,EAAmB;AAC1CC,QAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DF,OAA1D;AACAN,QAAAA,QAAQ,CAACC,SAAD,CAAR;AACH,OAHD;;AAIA,UAAIQ,uBAAuB,GAAG,UAAUC,QAAV,EAAoB;AAC9CH,QAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ,EAA6DE,QAA7D;;AACA,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACrBX,UAAAA,QAAQ,CAACC,SAAD,CAAR;AACH;AACJ,OALD;;AAMA,UAAIW,sBAAsB,GAAG,UAAUC,SAAV,EAAqB;AAC9CN,QAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ,EAA4DK,SAA5D;AACAb,QAAAA,QAAQ,CAACC,SAAD,CAAR;AACH,OAHD;;AAIAC,MAAAA,QAAQ,CAACE,EAAT,CAAY,cAAZ,EAA4BC,oBAA5B;AACAH,MAAAA,QAAQ,CAACE,EAAT,CAAY,iBAAZ,EAA+BK,uBAA/B;AACAP,MAAAA,QAAQ,CAACE,EAAT,CAAY,gBAAZ,EAA8BQ,sBAA9B;AACA,aAAO,YAAY;AACf,YAAIV,QAAQ,CAACY,cAAb,EAA6B;AACzBZ,UAAAA,QAAQ,CAACY,cAAT,CAAwB,cAAxB,EAAwCT,oBAAxC;AACAH,UAAAA,QAAQ,CAACY,cAAT,CAAwB,iBAAxB,EAA2CL,uBAA3C;AACAP,UAAAA,QAAQ,CAACY,cAAT,CAAwB,gBAAxB,EAA0CF,sBAA1C;AACH;AACJ,OAND;AAOH;AACJ,GA5BQ,EA4BN,CAACd,MAAD,EAASC,KAAT,EAAgBH,QAAhB,EAA0BI,QAA1B,EAAoCC,SAApC,CA5BM,CAAT;AA6BH,CAjCM","sourcesContent":["import { useWeb3React } from '@web3-react/core';\nimport { useEffect } from 'react';\nimport { getInjectedConnector } from './util';\nexport var useEthereumInactiveListener = function (chainIds, suppress) {\n    if (suppress === void 0) { suppress = false; }\n    var _a = useWeb3React(), active = _a.active, error = _a.error, activate = _a.activate;\n    var connector = getInjectedConnector(chainIds);\n    useEffect(function () {\n        var ethereum = window.ethereum;\n        if (ethereum && ethereum.on && !active && !error && !suppress) {\n            var handleChainChanged_1 = function (chainId) {\n                console.log(\"Handling 'chainChanged' event with payload\", chainId);\n                activate(connector);\n            };\n            var handleAccountsChanged_1 = function (accounts) {\n                console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n                if (accounts.length > 0) {\n                    activate(connector);\n                }\n            };\n            var handleNetworkChanged_1 = function (networkId) {\n                console.log(\"Handling 'networkChanged' event with payload\", networkId);\n                activate(connector);\n            };\n            ethereum.on('chainChanged', handleChainChanged_1);\n            ethereum.on('accountsChanged', handleAccountsChanged_1);\n            ethereum.on('networkChanged', handleNetworkChanged_1);\n            return function () {\n                if (ethereum.removeListener) {\n                    ethereum.removeListener('chainChanged', handleChainChanged_1);\n                    ethereum.removeListener('accountsChanged', handleAccountsChanged_1);\n                    ethereum.removeListener('networkChanged', handleNetworkChanged_1);\n                }\n            };\n        }\n    }, [active, error, suppress, activate, connector]);\n};\n"]},"metadata":{},"sourceType":"module"}